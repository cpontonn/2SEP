function [ExternalForcesComputationResults] = Cycling(filename, BiomechanicalModel, AnalysisParameters)
% Computation of the external forces for a cycling application
%
%   INPUT
%   - filename: name of the file to process (character string)
%   - BiomechanicalModel: musculoskeletal model
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis' 
%   OUTPUT
%   - ExternalForcesComputationResults: results of the external forces
%   computation (see the Documentation for the structure) 
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________

% Nom des fichiers d'entrée (name of input files)
filenamePF1 = 'JOTH_Fin_PD';
filenamePF2 = 'JOTH_Fin_PG';

Human_model = BiomechanicalModel.OsteoArticularModel;
load([filename '/ExperimentalData.mat']); %#ok<LOAD>
time = ExperimentalData.Time;
Firstframe = ExperimentalData.FirstFrame;
Lastframe = ExperimentalData.LastFrame;
real_markers = ExperimentalData.MarkerPositions;

nbframe=numel(time);
f_mocap=1/time(2);

% Initialisation
for f=1:nbframe
    for n=1:numel(Human_model)
        external_forces(f).fext(n).fext=zeros(3,2); %#ok<AGROW,*SAGROW>
    end
end

% Ajout des plate-forme (add platform names)
Platform1 = importCSV1(filenamePF1,f_mocap,Firstframe,Lastframe);
Platform2 = importCSV1(filenamePF2,f_mocap,Firstframe,Lastframe);

% Filtrage des données (data filtering)
if AnalysisParameters.ExternalForces.FilterActive
    for i=1:numel(Platform1)
        Platform1(i).Data=filt_data(Platform1(i).Data,AnalysisParameters.ExternalForces.FilterCutOff,f_mocap);
    end
    for i=1:numel(Platform2)
        Platform2(i).Data=filt_data(Platform2(i).Data,AnalysisParameters.ExternalForces.FilterCutOff,f_mocap);
    end
end

% Construction du repère local au niveau de chaque pied (building of local coordinate frame for each foot)
list_markers_pedale={'RTARI';'RTAR';'RHEE';'LTARI';'LTAR';'LHEE'};
for i=1:numel(list_markers_pedale) % trouver le numéro de chaque marqueur (finding number of marker)
    for j=1:numel(real_markers)
        if strcmp(list_markers_pedale{i},real_markers(j).name)
            list_markers_pedale{i,2}=j;
        end
    end
end

% Ajout des efforts de la plateforme dans la variable external_forces
% Platform forces are added in variable external_forces
% plate-forme 1
Solid_name='RFoot';  % nom du solide lié à la plate-forme (name of the foot on the platform: right foot)
        % classique
% for i=1:nbframe
%     A{i}=(real_markers(list_markers_pedale{1,2}).position(i,:)+real_markers(list_markers_pedale{2,2}).position(i,:))/2;
%     pPlatform1{i}=A{i}';
%     x1{i}=(A{i}-real_markers(list_markers_pedale{3,2}).position(i,:))/(norm(A{i}-real_markers(list_markers_pedale{3,2}).position(i,:)));   % A-RHEE
%     z1{i}=cross(x1{i},real_markers(list_markers_pedale{1,2}).position(i,:)-real_markers(list_markers_pedale{2,2}).position(i,:));  % x vect y
%     z1{i}=z1{i}/norm(z1{i});
%     y1{i}=cross(z1{i},x1{i});  % z vect x
%     RPlatform1{i}=[x1{i}' y1{i}' z1{i}'];
% end
        % y n'a pas de z
for i=1:nbframe
    A{i}=(real_markers(list_markers_pedale{1,2}).position(i,:)+real_markers(list_markers_pedale{2,2}).position(i,:))/2; %#ok<AGROW>
    pPlatform1{i}=A{i}'; %#ok<AGROW>
    x1{i}=(A{i}-real_markers(list_markers_pedale{3,2}).position(i,:))/(norm(A{i}-real_markers(list_markers_pedale{3,2}).position(i,:))); %#ok<AGROW>   % A-RHEE
    y1{i}=cross([0;0;1],x1{i}); %#ok<AGROW>
    y1{i}=y1{i}/norm(y1{i}); %#ok<AGROW>
    z1{i}=cross(x1{i},y1{i}); %#ok<AGROW>
    RPlatform1{i}=[x1{i}' y1{i}' z1{i}']; %#ok<AGROW>
end
        % y = y
% for i=1:nbframe
%     A{i}=(real_markers(list_markers_pedale{1,2}).position(i,:)+real_markers(list_markers_pedale{2,2}).position(i,:))/2;
%     pPlatform1{i}=A{i}';
%     y1{i}=[0 1 0];
%     z1{i}=cross((A{i}-real_markers(list_markers_pedale{3,2}).position(i,:)),y1{i});
%     z1{i}=z1{i}/norm(z1{i});
%     x1{i}=cross(y1{i},z1{i});
%     RPlatform1{i}=[x1{i}' y1{i}' z1{i}'];
% end
Solid=find(strcmp({Human_model.name},Solid_name));   % numéro de ce solide
[external_forces] = addPlatformForces(external_forces, Solid, pPlatform1, RPlatform1, -[Platform1(1:6).Data], [Platform1(7:9).Data]);  % enrichissement de la variable "external_forces"

% plate-forme 2
Solid_name='LFoot';  % nom du solide lié à la plate-forme (name of the foot on the platform: left foot)
        % classique
% for i=1:nbframe
%     A{i}=(real_markers(list_markers_pedale{4,2}).position(i,:)+real_markers(list_markers_pedale{5,2}).position(i,:))/2;
%     pPlatform2{i}=A{i}';
%     x2{i}=(A{i}-real_markers(list_markers_pedale{6,2}).position(i,:))/(norm(A{i}-real_markers(list_markers_pedale{6,2}).position(i,:)));   % A-RHEE
%     z2{i}=cross(x2{i},real_markers(list_markers_pedale{5,2}).position(i,:)-real_markers(list_markers_pedale{4,2}).position(i,:));  % x vect y
%     z2{i}=z2{i}/norm(z2{i});
%     y2{i}=cross(z2{i},x2{i});  % z vect x
%     RPlatform2{i}=[x2{i}'  y2{i}' z2{i}'];
% end
        % y n'a pas de z
for i=1:nbframe
    A{i}=(real_markers(list_markers_pedale{4,2}).position(i,:)+real_markers(list_markers_pedale{5,2}).position(i,:))/2;
    pPlatform2{i}=A{i}'; %#ok<AGROW>
    x2{i}=(A{i}-real_markers(list_markers_pedale{6,2}).position(i,:))/(norm(A{i}-real_markers(list_markers_pedale{6,2}).position(i,:))); %#ok<AGROW>   % A-RHEE 
    y2{i}=cross([0;0;1],x2{i}); %#ok<AGROW>
    y2{i}=y2{i}/norm(y2{i}); %#ok<AGROW>
    z2{i}=cross(x2{i},y2{i}); %#ok<AGROW>
    RPlatform2{i}=[x2{i}'  y2{i}' z2{i}']; %#ok<AGROW>
end
        % y = y 
% for i=1:nbframe
%     A{i}=(real_markers(list_markers_pedale{4,2}).position(i,:)+real_markers(list_markers_pedale{5,2}).position(i,:))/2;
%     pPlatform2{i}=A{i}';
%     y2{i}=[0 1 0];
%     z2{i}=cross((A{i}-real_markers(list_markers_pedale{6,2}).position(i,:)),y1{i});
%     z2{i}=z2{i}/norm(z2{i});
%     x2{i}=cross(y2{i},z2{i});
%     RPlatform2{i}=[x2{i}' y2{i}' z2{i}'];
% end        
Solid=find(strcmp({Human_model.name},Solid_name));   % numéro de ce solide
[external_forces] = addPlatformForces(external_forces, Solid, pPlatform2, RPlatform2, -[Platform2(1:6).Data], [Platform2(7:9).Data]);  %#ok<NASGU> % enrichissement de la variable "external_forces"

% Sauvegarde des données
if exist([filename '/ExternalForcesComputationResults.mat'],'file')
    load([filename '/ExternalForcesComputationResults.mat']);
end
ExternalForcesComputationResults.ExternalForcesExperiments = external_forces;

end
